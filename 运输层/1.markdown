# 概述

通讯的真正实体是主机上的进程，而**运输层的任务**是：为不同主机上的应用进程提供直接的通信服务，运输层协议又叫做端到端协议

运行在计算机上的进程使用进程标识符PID来标识，不同操作系统又使用不同格式的进程标识符，所以TCP/IP体系的运输层使用**端口号**区分应用层的不同应用进程

端口号使用16比特表示，取值范围是0-65535

- 0～1023：这些端口号指派给TCP/IP体系中最重要的应用协议：HTTP 80， DNS53， SSH22
- 1024～49151
- 49152～65535:留给客户进程暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程的动态端口号。通信结束后，端口号会被释放

端口号只具有本地意义

DNS，DHCP使用UDP

SMTP，FTP 21/20，HTTP 80，HTTPS 443使用TCP

1. 用户PC中的DNS客户端进程会发送一个DNS查询请求报文
2. DNS查询请求报文使用运输层的UDP协议封装成UDP用户数据报。源端口为49151～65535随机一个，目的端口为53
3. 将UDP数据报封装成IP数据报，发送给DNS服务器

![image.png](assets/image.png)

# UDP和TCP的对比

TCP面向连接，需要有三次握手和四次挥手的过程，所以连接开销更大。正是因为有连接，TCP可以提供可靠的数据传输，以字节流的形式传输数据，使用缓冲区管理数据，可以做到流量控制和拥塞控制，它更适用于可靠传输的应用

UDP没有连接，所以开销比较小。因为没有连接，UDP提供的不可靠的数据传输，它以数据报形式传输数据，每个数据报都是独立的。

# TCP的流量控制和拥塞控制

如果面试官询问TCP的流量控制和拥塞控制，你可以这样简洁明了地解释：

### 流量控制：

流量控制是TCP协议中确保数据传输稳定性的一种机制。其核心是利用滑动窗口协议来控制发送方发送数据的速率。

1. **滑动窗口**：发送方根据接收方的接收能力来调整发送数据的速率。接收方会告诉发送方它能够接收多少数据（窗口大小），发送方则不能发送超过这个窗口大小的数据。
2. **窗口大小**：接收方会动态调整窗口大小，以反映其当前的接收和处理能力。
3. **确认应答**：接收方接收到数据后，会发送确认消息给发送方，告知数据已接收，并可能调整窗口大小。
4. **快速重传**：如果接收方检测到数据丢失，会通过重复发送确认消息来提示发送方，发送方收到三个相同的确认消息后，会立即重传丢失的数据，而不是等待定时器到期。

### 拥塞控制：

拥塞控制是TCP协议中用来防止网络拥塞的一种机制。

1. **拥塞窗口**：发送方会维护一个拥塞窗口，用来限制发送数据的总量，以避免网络拥塞。
2. **慢启动**：在开始发送数据时，发送方会逐渐增加数据的发送量，直到达到一个安全阈值。
3. **拥塞避免**：达到阈值后，发送方会减缓数据发送量的增长，以避免造成网络拥塞。
4. **快速恢复**：当检测到网络拥塞的迹象时，发送方会采取措施减少拥塞窗口的大小，并进入快速恢复阶段，以快速响应拥塞情况。

通过这些机制，TCP能够确保在网络条件变化时，数据传输既高效又稳定。

# 三次握手

TCP的连接建立要解决三个问题：

1. TCP双方能够知道对方的存在
2. TCP双方能够协商一些参数
3. TCP双方能够对运输实体资源（缓冲区大小）进行分配

三次握手就是在TCP客户端和服务器之间交换三个TCP报文段：

![image.png](assets/image3.png)

- 第一次握手：客户端发送一个带有SYN标志位的TCP段（例如，SYN=1，seq=x），请求建立连接
- 第二次握手：服务器响应客户端的SYN请求，发送一个带有SYN和ACK标志位的TCP段（例如，SYN=1，ACK=1，seq=y，ack=x+1），表明服务器已经接收到客户端的请求，并提供了自己的初始序列号
- 第三次握手：客户端发送一个带有ACK标志位的TCP段（例如，ACK=1，seq=x+1，ack=y+1），确认服务器的SYN请求已被接收，完成连接建立

**SYN（Synchronize Sequence Numbers）同步序列号**：

- SYN是一个TCP标志位，用于建立连接时同步双方的序列号。当一个设备（客户端或服务器）想要建立一个TCP连接时，它会发送一个带有SYN标志位设置为1的TCP段。这表明它希望开始一个新连接，并提供了一个初始序列号

**ACK（Acknowledgment）确认**：

- ACK也是一个TCP标志位，用于确认收到的数据。当ACK标志位设置为1时，表示接收方已经成功接收了发送方的数据，并且报文头中的确认号（ack）字段包含期望接收的下一个字节的序列号

**seq（Sequence Number）序列号**：

- seq是TCP报文头中的一个字段，用于标识当前报文段的第一个字节的序列号。**序列号用于确保数据的顺序传输，并且允许接收方检测丢包和重传**

**ack（Acknowledgment Number）确认号**：

- ack是TCP报文头中的一个字段，它包含发送方期望接收的下一个字节的序列号。当接收方发送一个确认（ACK）时，它会在ack字段中填入这个值，告诉发送方哪些数据已经被成功接收


## **两报文握手行不行？**

**无法防止已失效的连接请求突然又传送到了服务器**：三次握手的一个关键功能是防止重复连接，如果一个旧的连接请求在网络中延迟了，然后到达服务器，服务器可能会错误地认为客户端希望重新建立连接。通过序列号和确认号，三次握手可以确保连接请求是最新的


# 四次挥手

四次挥手是为了保证两方都能发送完全部的数据，然后结束连接

1. **第一次挥手**：主动关闭方（可以是客户端或服务器）发送完数据后，会发送一个FIN（结束）标志位设置为1的TCP段，用来关闭主动方到被动方的数据传输。主动方进入FIN-WAIT-1状态
2. **第二次挥手**：被动关闭方接收到FIN后，发送一个ACK（确认）标志位设置为1的TCP段作为回应，并进入CLOSE-WAIT状态。主动关闭方接收到ACK后，进入FIN-WAIT-2状态
3. **第三次挥手**：被动关闭方持续发送数据，发送完后，也发送一个FIN标志位设置为1的TCP段，请求关闭其到主动关闭方的数据传输
4. **第四次挥手**：主动关闭方接收到这个FIN后，发送一个ACK标志位设置为1的TCP段作为回应，并进入TIME-WAIT状态。TIME-WAIT状态是为了防止被动关闭方没有接收到最终的ACK，而重发FIN。等待2MSL（最大报文段生存时间的两倍）后，主动关闭方关闭连接
5. **连接关闭**：被动关闭方接收到最终的ACK后，关闭连接，进入CLOSED状态

在整个过程中，每个FIN和ACK段都包含一个序列号和确认号，确保数据的同步和完整性

![image.png](assets/image5.png)



MSL是"Maximum Segment Lifetime"的缩写，意为"最大报文段生存时间"。在TCP/IP网络中，MSL定义了TCP段在网络中可以存在的最长时间。这个时间是设计用来确保所有可能的重传尝试都能完成，从而避免因网络延迟或重传而导致的旧数据段与新数据段发生冲突。

### MSL的主要作用包括：

1. **确保数据段的超时和重传**：如果一个TCP段在网络中传输，而发送方在MSL时间内没有收到该段的ACK确认，它会认为该段已经丢失，并触发重传机制。
2. **避免旧数据段干扰**：在TCP连接关闭后，发送方在2MSL时间内不会开始新的连接，以确保所有可能的旧数据段（包括重传）都已经在网络中消失，防止它们干扰新的连接。
3. **连接关闭**：在TCP的四次挥手连接关闭过程中，最后一次挥手（即主动关闭方发送的ACK）需要等待2MSL时间，以确保被动关闭方有机会接收到最终的ACK确认，即使被动关闭方由于某些原因延迟发送FIN。

### MSL的典型值：

MSL的具体值在不同的系统和实现中可能有所不同，但一个常见的默认值是2分钟（120秒）。这个值足够长，以覆盖大多数网络条件，包括可能的路由问题和重传。

# TCP报文段的首部格式

![image.png](assets/image4.png)
